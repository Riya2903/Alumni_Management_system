        -:    0:Source:validation.cpp
        -:    0:Graph:menus.gcno
        -:    0:Data:menus.gcda
        -:    0:Runs:1
        -:    1:/****************************************************************************************************************************************************************************
        -:    2:         FILE NAME                 : validation.cpp
        -:    3:
        -:    4:         DESCRIPTION               : This file contains all the validations that can be performed while entering the Alumni
        -:    5:	                              details,Student details etc.
        -:    6:
        -:    7:         RETURNS                   :
        -:    8:
        -:    9:
        -:   10:
        -:   11:******************************************************************************************************************************************************************************/
        -:   12:
        -:   13:
        -:   14:#include<iostream>
        -:   15:#include<iomanip>
        -:   16:#include<cctype>
        -:   17:#include<string>
        -:   18:#include<regex>
        -:   19:using namespace std;
        -:   20:
        -:   21:class validations
        -:   22:{
        -:   23:
        -:   24:	public:
        -:   25:		//Validations for alumni register number
        -:   26:
function _ZN11validations28check_alumni_register_numberENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 2 returned 100% blocks executed 58%
        2:   27:		int check_alumni_register_number(string register_number)
        -:   28:		{
        2:   29:			if(register_number.length() != 6)
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
        -:   30:			{
    #####:   31:				cout<<endl<<"Register Number length should be 6"<<endl;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   32:				return 0;
        -:   33:			}
       2*:   34:			if( register_number[0] != 'U' || register_number[1] != 'A')
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0
call    3 returned 2
branch  4 taken 0 (fallthrough)
branch  5 taken 2
branch  6 taken 0 (fallthrough)
branch  7 taken 2
        -:   35:			{
    #####:   36:				cout<<"First two characters of the university Alumni register number should be UA"<<endl;
call    0 never executed
call    1 never executed
    #####:   37:				return 0;
        -:   38:			}
       10:   39:			for(int i = 2; i<6; i++)
branch  0 taken 8 (fallthrough)
branch  1 taken 2
        -:   40:			{
        8:   41:				if(isdigit(register_number[i]) != 1)
call    0 returned 8
branch  1 taken 0 (fallthrough)
branch  2 taken 8
        -:   42:				{
    #####:   43:					cout<<"The last four characters should be integers"<<endl;
call    0 never executed
call    1 never executed
    #####:   44:					return 0;
        -:   45:				}
        -:   46:			}
        2:   47:			return 1;
        -:   48:		}
        -:   49:
        -:   50:
        -:   51:		//Validations for student register number
        -:   52:
        -:   53:
function _ZN11validations29check_Student_register_numberENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 58%
        1:   54:		int check_Student_register_number(string register_number)
        -:   55:		{
        1:   56:			if(register_number.length() != 6)
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -:   57:			{
    #####:   58:				cout<<endl<<"Register Number length should be 6"<<endl;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   59:				return 0;
        -:   60:			}
       1*:   61:			if( register_number[0] != 'U' || register_number[1] != 'S')
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
branch  6 taken 0 (fallthrough)
branch  7 taken 1
        -:   62:			{
    #####:   63:				cout<<"First two characters of student register number should be US"<<endl;
call    0 never executed
call    1 never executed
    #####:   64:				return 0;
        -:   65:			}
        5:   66:			for(int i = 2; i<6; i++)
branch  0 taken 4 (fallthrough)
branch  1 taken 1
        -:   67:			{
        4:   68:				if(isdigit(register_number[i]) != 1)
call    0 returned 4
branch  1 taken 0 (fallthrough)
branch  2 taken 4
        -:   69:				{
    #####:   70:					cout<<"The last four characters should be integers"<<endl;
call    0 never executed
call    1 never executed
    #####:   71:					return 0;
        -:   72:				}
        -:   73:			}
        1:   74:			return 1;
        -:   75:		}
        -:   76:
        -:   77:		//Validation for the field that should have only integers
        -:   78:
function _ZN11validations12check_numberENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 7 returned 100% blocks executed 73%
        7:   79:		int check_number(string number)
        -:   80:		{
        -:   81:
       49:   82:			for(int i = 0; i<number.length(); i++)
call    0 returned 49
branch  1 taken 42 (fallthrough)
branch  2 taken 7
        -:   83:			{
       42:   84:				if(isdigit(number[i]) != 1)
call    0 returned 42
branch  1 taken 0 (fallthrough)
branch  2 taken 42
        -:   85:				{
    #####:   86:					cout<<"The field should be only integers"<<endl;
call    0 never executed
call    1 never executed
    #####:   87:					return 0;
        -:   88:				}
        -:   89:			}
        7:   90:			return 1;
        -:   91:		}
        -:   92:
        -:   93:
        -:   94:		//Validation for the field that should have only alphabets
        -:   95:
        -:   96:
function _ZN11validations12check_stringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 13 returned 100% blocks executed 100%
       13:   97:		int check_string(string s)
        -:   98:		{
        -:   99:
       89:  100:			for(int i = 0; i<s.length(); i++)
call    0 returned 89
branch  1 taken 78 (fallthrough)
branch  2 taken 11
        -:  101:			{
       78:  102:				if(isalpha(s[i]) == 0)
call    0 returned 78
branch  1 taken 2 (fallthrough)
branch  2 taken 76
        -:  103:				{
        2:  104:					cout<<"The field should be only alphabets"<<endl;
call    0 returned 2
call    1 returned 2
        2:  105:					return 0;
        -:  106:				}
        -:  107:			}
       11:  108:			return 1;
        -:  109:		}
        -:  110:
        -:  111:		//Validation for checking the length
        -:  112:
        -:  113:
function _ZN11validations12check_lengthENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi called 6 returned 100% blocks executed 47%
        6:  114:		int check_length(string s, int size)
        -:  115:		{
       6*:  116:			if (size == 10 && s.length() != 10)
branch  0 taken 3 (fallthrough)
branch  1 taken 3
call    2 returned 3
branch  3 taken 0 (fallthrough)
branch  4 taken 3
branch  5 taken 0 (fallthrough)
branch  6 taken 6
        -:  117:			{
    #####:  118:				cout<<"This field should only have "<<size<<" numbers"<<endl;
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  119:				return 0;
        -:  120:			}
        6:  121:			if(s.length()>size)
call    0 returned 6
branch  1 taken 0 (fallthrough)
branch  2 taken 6
        -:  122:			{
    #####:  123:				cout<<"This field should not have length more than "<<size<<endl;
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  124:				return 0;
        -:  125:			}
        6:  126:			return 1;
        -:  127:		}
        -:  128:
        -:  129:		//Validation for email checking
        -:  130:
        -:  131:
function _ZN11validations11Email_checkENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 4 returned 100% blocks executed 78%
        4:  132:		bool Email_check(string email)
        -:  133:		{
        8:  134:			const regex pattern("(\\w+)(\\.|_)?(\\w*)@(\\w+)(\\.(\\w+))+");
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 4
call    4 never executed
        8:  135:			return regex_match(email,pattern);
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        -:  136:		}
        -:  137:
        -:  138:		//Validation for checking the department
        -:  139:
        -:  140:
function _ZN11validations16check_departmentERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 6 returned 100% blocks executed 56%
        6:  141:		int check_department(string& s)
        -:  142:		{
       6*:  143:			if(s == "CSE" || s == "ECE" || s == "EEE" || s == "MECH" || s == "CIVIL")
call    0 returned 6
branch  1 taken 1 (fallthrough)
branch  2 taken 5
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
branch 15 taken 6 (fallthrough)
branch 16 taken 0
        -:  144:			{
        6:  145:				return 1;
        -:  146:			}
    #####:  147:			cout<<"Invalid department name"<<endl;
call    0 never executed
call    1 never executed
    #####:  148:			return 0;
        -:  149:		}
        -:  150:
        -:  151:};
        -:  152:
