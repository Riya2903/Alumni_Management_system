        -:    0:Source:admin_class.cpp
        -:    0:Graph:menus.gcno
        -:    0:Data:menus.gcda
        -:    0:Runs:1
        -:    1:/************************************************************************
        -:    2: *** FILENAME  : admin_class.cpp
        -:    3: *
        -:    4: * * DESCRIPTION : This file defines the function that would be used by the program for the Admin directly login to portal using password
        -:    5: *                 and Modify the Details of Alumni ,generate a Reports for Connect Session with Alumni and Student.
        -:    6: *
        -:    7: * Revision History:
        -:    8: *
        -:    9: *      Date                            NAME                       Reason
        -:   10: *       
        -:   11: *    27th Sep 2022                   Riya Malik                -----------   
        -:   12: *
        -:   13: * *************************************************************************/
        -:   14:
        -:   15:#include<iostream>
        -:   16:#include<string>
        -:   17:#include<vector>
        -:   18:#include<tuple>
        -:   19:#include "admin_class.hpp"
        -:   20:validations v2;
        -:   21:
        -:   22:/*********************************************************
        -:   23: * FUNCTION NAME  : Edit_Alumni
        -:   24: *
        -:   25: * DESCRIPTION  : The  Admin will Edit the Details of Alumni like name,email id,telephone number etc...   
        -:   26: *
        -:   27: * RETURNS        :-------
        -:   28: *
        -:   29: * *************************************************************/
        -:   30:
        -:   31:
function _ZN5Admin11Edit_AlumniEv called 1 returned 100% blocks executed 31%
        1:   32:int Admin::Edit_Alumni()
        -:   33:{
        -:   34:
        -:   35:
        2:   36:	string reg_num;
call    0 returned 1
call    1 returned 1
call    2 never executed
        1:   37:	cout<<endl<<"------------------Editing the alumni details--------"<<endl;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:   38:	cout<<endl<<"Enter the alumni registeration number"<<endl;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:   39:	cin>>reg_num;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        2:   40:	string ch,ch1;
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 never executed
call    5 never executed
        1:   41:	list<Alumni>temp;
call    0 returned 1
call    1 never executed
        2:   42:	for(auto it = alm.begin();it!=alm.end();it++)
call    0 returned 1
call    1 returned 2
call    2 returned 2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
call    5 returned 1
        -:   43:	{
        1:   44:		if(it->register_number !=reg_num)
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
        -:   45:		{
    #####:   46:			temp.push_back(*it);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   47:		}
        -:   48:		else
        -:   49:		{
        1:   50:			cout<<endl<<"Do You want to edit the personal details? yes/no"<<endl;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:   51:			cin>>ch;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   52:			if(ch=="yes")
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -:   53:			{
    #####:   54:					cout<<endl<<"Enter yes to edit name: "<<endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:   55:					cin>>ch1;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   56:					if(ch1=="yes")
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   57:					{
        -:   58:					while(1)
        -:   59:						{
    #####:   60:						cout<<"Enter first name: "<<endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:   61:						getline(cin>>ws,it->name);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:   62:						cin.clear();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   63:						if(v2.check_string(it->name)==1)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
        -:   64:						{
    #####:   65:							if(v2.check_length(it->name,len)==1)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
        -:   66:							{
    #####:   67:								break;
        -:   68:							}
        -:   69:						}
        -:   70:						}
        -:   71:					}
        -:   72:
    #####:   73:					cout<<endl<<"Enter yes to edit telephone number: "<<endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:   74:					cin>>ch1;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   75:					if(ch1=="yes")
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   76:					{
        -:   77:					while(1)
        -:   78:					{
    #####:   79:						cout<<"Enter telephone number: ";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   80:						getline(cin,it->tel_no);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   81:						cin.clear();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   82:						if(v2.check_number(it->tel_no)==1)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
        -:   83:						{
    #####:   84:							if(v2.check_length(it->tel_no,size)==1)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
        -:   85:							{
    #####:   86:								break;
        -:   87:							}
        -:   88:						}
        -:   89:						else
    #####:   90:							continue;
        -:   91:					}
        -:   92:					}
    #####:   93:					cout<<"Enter yes to edit email id: "<<endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:   94:					cin>>ch1;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   95:					if(ch1=="yes")
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   96:					{
        -:   97:					while(1)
        -:   98:					{
    #####:   99:						cout<<endl<<"Enter email id: ";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  100:
    #####:  101:						getline(cin,it->email_id);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  102:						cin.clear();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  103:						if(v2.Email_check(it->email_id))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
        -:  104:						{
    #####:  105:							break;
        -:  106:						}
        -:  107:						else 
        -:  108:						{
    #####:  109:							cout<<endl<<"Please enter a valid email id"<<endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  110:							continue;
        -:  111:						}
        -:  112:					}
        -:  113:					}
    #####:  114:					cout<<"Enter yes to edit present city: "<<endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  115:					cin>>ch1;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  116:					if(ch1=="yes")
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  117:					{
        -:  118:					while(1)
        -:  119:						{
    #####:  120:						cout<<endl<<"Enter present city: ";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  121:						cin.ignore();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  122:						getline(cin>>ws,it->present_address);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####:  123:						cin.clear();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  124:						if(it->present_address.length()>5)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  125:						{
    #####:  126:							break;
        -:  127:						}
        -:  128:						else
        -:  129:						{
    #####:  130:							cout<<endl<<"Address should have minimum 5 characters"<<endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  131:							continue;
        -:  132:						}
        -:  133:
        -:  134:
        -:  135:						}
        -:  136:				
        -:  137:					}
        -:  138:
        -:  139:
        -:  140:			}
        1:  141:				temp.push_back(*it);
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        -:  142:		/*	cout<<endl<<"Do you want to edit professional details? yes/no"<<endl;
        -:  143:			cin>>ch;
        -:  144:			if(ch=="yes")
        -:  145:			{
        -:  146:				Alumni :: Edit_Details(reg_num);		
        -:  147:
        -:  148:			}*/
        1:  149:			cout<<endl<<"Updated successfully"<<endl;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        -:  150:
        -:  151:		}
        -:  152:	}
        1:  153:	alm.clear();
call    0 returned 1
        2:  154:	for(list<Alumni>::iterator it = temp.begin(); it!=temp.end();it++)
call    0 returned 1
call    1 returned 2
call    2 returned 2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
call    5 returned 1
        -:  155:	{
        1:  156:		alm.push_back(*it);
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        -:  157:	}
        1:  158:	temp.clear();
call    0 returned 1
        1:  159:	int flag = 0;
        -:  160:	try
        -:  161:	{
        -:  162:		
       1*:  163:	for(list<Alumni>::iterator it = alm.begin(); it!=alm.end();it++)
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
call    5 never executed
        -:  164:	{
        1:  165:		if(it->register_number == reg_num)
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        -:  166:		{
        1:  167:		cout<<endl<<"--------------------------------The updated alumni profile---------------------------------"<<endl;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  168:		Alumni::View_Profile(reg_num);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
call    7 never executed
        1:  169:		flag = 1;
        1:  170:		break;
        -:  171:
        -:  172:		}
        -:  173:	}
        1:  174:	if(flag==0)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  175:		throw flag;
call    0 never executed
call    1 never executed
        -:  176:	}
    =====:  177:	catch(int flag)
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  178:	{
    =====:  179:		cout<<"No profile to view!"<<endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  180:	}
        -:  181:
        2:  182:	return 0;
call    0 returned 1
        -:  183:}
        -:  184:
        -:  185:/*********************************************************
        -:  186: * FUNCTION NAME  : delete_alumni_record 
        -:  187: *
        -:  188: * DESCRIPTION   : Admin can delete the Records of Alumni.
        -:  189: *
        -:  190: * RETURNS        :--------
        -:  191: *
        -:  192: * *************************************************************/
        -:  193:
        -:  194:
        -:  195:
function _ZN5Admin20delete_alumni_recordEv called 1 returned 100% blocks executed 69%
        1:  196:int Admin :: delete_alumni_record()
        -:  197:{
        2:  198:	string reg_num;
call    0 returned 1
call    1 returned 1
call    2 never executed
        1:  199:	cout<<endl<<"To delete an alumni record enter his registeration number: "<<endl;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  200:	cin>>reg_num;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  201:	list<Alumni>temp;
call    0 returned 1
call    1 never executed
        2:  202:	for(list<Alumni>::iterator it = alm.begin(); it!=alm.end();it++)
call    0 returned 1
call    1 returned 2
call    2 returned 2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
call    5 returned 1
        -:  203:	{
        1:  204:		if(it->register_number != reg_num)
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
        -:  205:		{
        -:  206:			
    #####:  207:			temp.push_back(*it);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  208:		}
        -:  209:	}
        1:  210:	alm.clear();
call    0 returned 1
        -:  211:
       1*:  212:	for(list<Alumni>::iterator it = temp.begin(); it!=temp.end();it++)
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
call    5 never executed
        -:  213:	{
    #####:  214:		alm.push_back(*it);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  215:	}
        1:  216:	temp.clear();
call    0 returned 1
        -:  217:	
        -:  218:	
        -:  219:
        -:  220:
        2:  221:	return 0;
call    0 returned 1
        -:  222:}
        -:  223:
        -:  224:/*********************************************************
        -:  225: * FUNCTION NAME  : list_of_connect 
        -:  226: *
        -:  227: * DESCRIPTION   : Admin can generate the list of scheduled connect and completed connect
        -:  228: *                 with student and Alumni. 
        -:  229: *
        -:  230: * RETURNS        :----------
        -:  231: *
        -:  232: * *************************************************************/
        -:  233:
        -:  234:
        -:  235:
function _ZN5Admin16list_of_connectsEv called 1 returned 100% blocks executed 72%
        1:  236:int Admin :: list_of_connects()
        -:  237:{
        1:  238:	cout<<endl<<"******************************************"<<endl;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  239:	cout<<endl<<"----List of all scheduled connected sessions----"<<endl;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        -:  240:
        2:  241:	string al,st,dept;
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 never executed
call    6 never executed
call    7 never executed
        1:  242:	int flag = 0;
        -:  243:
        2:  244:	for(auto current_tuple : all_connect)
call    0 returned 1
call    1 returned 1
call    2 returned 2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
call    5 returned 1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
call    9 returned 1
call   10 returned 1
call   11 never executed
        -:  245:	{
        2:  246:		tuple<string,string,string>current = current_tuple;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 never executed
        1:  247:		tie(al,st,dept) = current;
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  248:		if(al.length()==6)
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        -:  249:		{
        1:  250:		cout<<"Alumni Regsitration number: "<<al<<"  Student Registration number: "<<st<<endl<<"Department "<<dept<<endl;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
call   12 returned 1
branch 13 taken 1 (fallthrough)
branch 14 taken 0 (throw)
call   15 returned 1
branch 16 taken 1 (fallthrough)
branch 17 taken 0 (throw)
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0 (throw)
call   21 returned 1
branch 22 taken 1 (fallthrough)
branch 23 taken 0 (throw)
        1:  251:		flag=1;
        -:  252:		}
        -:  253:
        -:  254:	}
        1:  255:	if(flag == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  256:		cout<<"No student has scheduled a connect till now! "<<endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        2:  257:	return 0;
call    0 returned 1
        -:  258:}
        -:  259:
        -:  260:/*********************************************************
        -:  261: * FUNCTION NAME  :Completed_Connect_Report 
        -:  262: *
        -:  263: * DESCRIPTION   :Admin can generate the Report for the connect session that is completed.
        -:  264: *
        -:  265: * RETURNS        :----------------
        -:  266: *
        -:  267: * *************************************************************/
        -:  268:
        -:  269:
function _ZN5Admin24Completed_Connect_ReportEv called 1 returned 100% blocks executed 81%
        1:  270:int Admin ::Completed_Connect_Report()
        -:  271:{
        1:  272:	cout<<"*******************************************Recent Connect Seesion Report********************************"<<endl;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        2:  273:	auto current_tuple =  all_connect.front();
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 never executed
        1:  274:	tuple<string,string,string>current = current_tuple;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 never executed
        1:  275:	if(get<0>(current).length()==6)
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        -:  276:	{
        1:  277:		cout<<"Student registration number:  "<<get<1>(current)<<"     "<<" Alumni regisration number:   "<<get<0>(current)<<endl;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
call   10 returned 1
branch 11 taken 1 (fallthrough)
branch 12 taken 0 (throw)
call   13 returned 1
call   14 returned 1
branch 15 taken 1 (fallthrough)
branch 16 taken 0 (throw)
call   17 returned 1
branch 18 taken 1 (fallthrough)
branch 19 taken 0 (throw)
        1:  278:		cout<<"The connected session belongs to: "<<get<2>(current)<<endl;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        -:  279:	}
        -:  280:	else
        -:  281:	{
    #####:  282:		cout<<"No reports to show"<<endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  283:	}
        -:  284:
        2:  285:	return 0;
call    0 returned 1
        -:  286:}
        -:  287:
        -:  288:/*********************************************************
        -:  289: * FUNCTION NAME  :Report_Nonplaced_Students 
        -:  290: *
        -:  291: * DESCRIPTION    :The Admin can generate there Report for the students who are not placed in any company.
        -:  292: *
        -:  293: * RETURNS        :----------
        -:  294: *
        -:  295: * *************************************************************/
        -:  296:
        -:  297:
        -:  298:
        -:  299:
function _ZN5Admin25Report_Nonplaced_StudentsEv called 1 returned 100% blocks executed 55%
        1:  300:int Admin ::Report_Nonplaced_Students()
        -:  301:{
        1:  302:	string dept;
call    0 returned 1
call    1 never executed
        1:  303:	cout<<endl<<"Enter your department"<<endl;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:  304:	cin>>dept;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  305:	try
        -:  306:	{
        1:  307:	if(v2.check_department(dept)!=1)
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
branch  7 taken 0 (fallthrough)
branch  8 taken 1
call    9 never executed
        -:  308:	{
    #####:  309:		throw dept;
call    0 never executed
call    1 never executed
call    2 never executed
        -:  310:	}
        -:  311:	else
        -:  312:	{
        -:  313:
        1:  314:	int flag=0;
        1:  315:	system("read a");
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  316:	system("clear");
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        2:  317:	for(auto iter = stl.begin(); iter!=stl.end();iter++)
call    0 returned 1
call    1 returned 2
call    2 returned 2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
call    5 returned 1
        -:  318:	{
        1:  319:		if(iter->ret_placed()=="no")
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0
        -:  320:		{
        1:  321:			if(iter->ret_dept()==dept)
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0
        -:  322:			{
        -:  323:
        1:  324:				student::view_profile(iter->ret_reg());
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 1
call    8 never executed
        1:  325:				flag=1;
        -:  326:
        -:  327:			}
        -:  328:		}
        -:  329:	}
        1:  330:	if(flag==0)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  331:		cout<<endl<<"All students are placed in this department"<<endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
        -:  332:	}
        -:  333:	}
    =====:  334:	catch(string s)
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
        -:  335:	{
    =====:  336:		cout<<"Error! there is no such department"<<endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  337:	}
        2:  338:		return 0;
call    0 returned 1
        -:  339:
        -:  340:
        -:  341:}
        -:  342:
        -:  343:
        -:  344:
        -:  345:/*********************************************************
        -:  346:* FUNCTION NAME  :Connect_Delete
        -:  347:*
        -:  348:* DESCRIPTION   :Admin can delete the connect records from the file after the connect is carried out. 
        -:  349:*
        -:  350:* RETURNS        :--------
        -:  351:*
        -:  352:* *************************************************************/
        -:  353:
        -:  354:
        -:  355:
function _ZN5Admin14Connect_DeleteEv called 1 returned 100% blocks executed 54%
        1:  356:int Admin ::Connect_Delete()
        -:  357:{
        1:  358:	cout<<endl<<"The connect record is get deleted-----"<<endl;
call    0 returned 1
call    1 returned 1
call    2 returned 1
        -:  359:	try
        -:  360:	{
        1:  361:		all_connect.pop_front();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  362:	}
    =====:  363:	catch(...)
call    0 never executed
call    1 never executed
call    2 never executed
        -:  364:	{
    =====:  365:		cout<<"Can't delete the connect anymore!"<<endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  366:	}
        1:  367:	return 0;
        -:  368:}
